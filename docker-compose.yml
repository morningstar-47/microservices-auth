# services:
#   auth-service:
#     build: ./auth-service
#     ports:
#       - "8000:8000"
#     depends_on:
#       - postgres
#     environment:
#       - POSTGRES_HOST=postgres
#     env_file:
#       - .env
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#   user-service:
#     build: ./user-service
#     ports:
#       - "8001:8000"
#     depends_on:
#       - mongo
#     environment:
#       - MONGO_HOST=mongo
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#   api-gateway:
#     build: ./api-gateway
#     ports:
#       - "8080:8000"
#     depends_on:
#       - auth-service
#       - user-service
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#   postgres:
#     image: postgres:13
#     environment:
#       POSTGRES_DB: auth_db
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#   mongo:
#     image: mongo:5.0
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db
# volumes:
#   postgres_data:
#   mongo_data:

# version: '3.8'

services:
  # PostgreSQL Database (must start first)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-auth_db}
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-auth_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  # MongoDB Database (must start first)
  mongo:
    image: mongo:7.0
    container_name: mongo
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME:-user_db}
    volumes:
      - mongo_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DB_USER=${DB_USER:-user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-auth_db}
      - JWT_SECRET=${JWT_SECRET:-changeme}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_MINUTES=${JWT_EXPIRATION_MINUTES:-30}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8002:8000"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB_NAME=${MONGO_DB_NAME:-user_db}
      - JWT_SECRET=${JWT_SECRET:-changeme}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8000"
    depends_on:
      - auth-service
      - user-service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - microservices-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data: